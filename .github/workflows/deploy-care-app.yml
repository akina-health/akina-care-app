name: Build and Deploy Tauri App (macOS)

on:
  repository_dispatch:
    types: [bitbucket-trigger]
  push:
    branches: [develop]
  pull_request:
    branches: [develop]
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]

    runs-on: ${{ matrix.platform }}

    steps:
      # Log info from Bitbucket if triggered from there
      - name: Log Bitbucket Info
        if: github.event_name == 'repository_dispatch'
        run: |
          echo "Triggered from Bitbucket"
          echo "Repository: ${{ github.event.client_payload.repository }}"
          echo "Commit: ${{ github.event.client_payload.commit }}"
          echo "Branch: ${{ github.event.client_payload.branch }}"
          echo "Pipeline URL: ${{ github.event.client_payload.pipeline_url }}"
        shell: bash

      - name: Determine Branch to Checkout
        run: |
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            echo "BRANCH=${{ github.event.client_payload.branch }}" >> $GITHUB_ENV
          else
            echo "BRANCH=try/deploy-update-mac" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Clone from Bitbucket (Dynamic Branch)
        run: |
          git clone --branch ${{ env.BRANCH }} ${{ secrets.BITBUCKET_CLONE_TOKEN }} ./bitbucket-source
        shell: bash

      - name: Verify the Checked-Out Branch
        run: |
          cd ./bitbucket-source
          echo "Current branch: $(git branch --show-current)"
          echo "Latest Commit Message: $(git log -1 --pretty=format:'%s')"
        shell: bash

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: './bitbucket-source/yarn.lock'

      - name: Install Yarn dependencies
        run: |
          cd ./bitbucket-source
          yarn install --frozen-lockfile
        shell: bash

      - name: Install Rust (rustup)
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './bitbucket-source/apps/akina-care/src-tauri -> target'

      - name: Import macOS Code Signing Certificate
        if: matrix.platform == 'macos-latest'
        uses: apple-actions/import-codesign-certs@v3
        with: 
          p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
          p12-password: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}

      - name: Import Apple API Key for Notarization
        if: matrix.platform == 'macos-latest'
        run: |
          echo "${{ secrets.APPLE_API_KEY }}" | base64 --decode > $RUNNER_TEMP/AuthKey.p8
        shell: bash

      - name: Install cargo-binstall
        uses: taiki-e/install-action@cargo-binstall
      
      - name: Install Tauri CLI
        run: cargo binstall tauri-cli --no-confirm
        shell: bash

      # macOS Build
      - name: Build Tauri App (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          ls -al $RUNNER_TEMP
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
          cd ./bitbucket-source/apps/akina-care/src-tauri/
          cargo tauri build --target x86_64-apple-darwin
          cargo tauri build --target aarch64-apple-darwin
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          APPLE_API_ISSUER: 887c8bc2-9ed7-47b4-ac70-43fc61065783
          APPLE_API_KEY: 4YKKBS538P
          APPLE_NOTARIZATION: true
          APPLE_NOTARIZATION_TOOL: notarytool
          APPLE_API_KEY_PATH: ${{ runner.temp }}/AuthKey.p8
        shell: bash

      # - name: Debug Azure Login
      #   run: |
      #     echo "Testing Azure login"
      #     az login --service-principal --username "${{ secrets.AZURE_CLIENT_ID }}" -p="${{ secrets.AZURE_CLIENT_SECRET }}" --tenant "${{ secrets.AZURE_TENANT_ID }}"
      #   shell: bash

      - name: Cache trusted-signing-cli
        id: cache-cli
        uses: actions/cache@v3
        with:
          path: ~/.cargo/bin/trusted-signing-cli
          key: trusted-signing-cli-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Trusted Signing CLI
        if: steps.cache-cli.outputs.cache-hit != 'true'
        run: |
          echo "Installing trusted-signing-cli..."
          cargo install trusted-signing-cli
          echo "Installation complete"
        shell: bash

      - name: Add cargo bin to path
        run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        shell: bash

      # - name: Test Trusted Signing CLI
      #   run: |
      #     echo "Testing signing process"
      #     echo "int main() { return 0; }" > test.c
      #     gcc test.c -o test.exe
      #     trusted-signing-cli -e https://weu.codesigning.azure.net/ -a AkinaCareDesktop -c AkinaCareAppCertificateProfile test.exe
      #   env:
      #     AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      #     AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      #     AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      #   shell: bash

      # Windows-specific setup
      - name: Install Windows Dependencies
        if: matrix.platform == 'windows-latest'
        run: |
          rustup target add x86_64-pc-windows-msvc
          rustup component add rustfmt clippy
        shell: bash

      - name: Install WebView2 Runtime (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          curl -o MicrosoftEdgeWebView2Setup.exe https://go.microsoft.com/fwlink/p/?LinkId=2124703
          ./MicrosoftEdgeWebView2Setup.exe /silent /install
        shell: bash

      - name: Build Tauri App (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          cd ./bitbucket-source/apps/akina-care/src-tauri/
          cargo install trusted-signing-cli
          cargo tauri build --target x86_64-pc-windows-msvc --verbose
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        shell: bash


      - name: upload assets
        uses: crabnebula-dev/cloud-release@v0
        with:
          command: release upload ${{ env.CN_APPLICATION }} --framework tauri
          api-key: ${{ secrets.CN_API_KEY }}
          path: ./src-tauri
